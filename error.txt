# Function to summarize a list of texts using batching
@st.cache_resource
def summarize_text(texts, batch_size=10, max_length=70, min_length=30):
    # Get the pre-initialized summarization pipeline
    summarization_pipeline = get_summarization_pipeline()

    all_summaries = []

    # Iterate over the texts in batches
    for i in range(0, len(texts), batch_size):
        # Take the next batch of texts
        batch_texts = texts[i:i+batch_size].tolist()  # Convert to list
        try:
            # Compute the summaries for a batch of texts
            summaries = summarization_pipeline(batch_texts, max_length=max_length, min_length=min_length, do_sample=False)
            # Extract the summaries from the output and add them to the list of summaries
            batch_summaries = [summary['summary_text'] for summary in summaries]
            all_summaries.extend(batch_summaries)
        except Exception as e:
            # If an error occurred while summarizing the texts, print the exception
            print(f"Error occurred during summarization: {e}")
            all_summaries.extend(batch_texts)
    return all_summaries


C:\Users\m.berenji\Desktop\To Move\git\NPS Script\transcript_categories\batch_summary_transcript_v1broken.py:98: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.
  batch_texts = texts[i:i+batch_size].tolist()  # Convert to list
